---
- name: Create vyos buildbox
  hosts: localhost
  gather_facts: True
  connection: local

  vars:
    machine_type: g1-small
    image: debian-8
    service_account_email:
    credentials_file:
    project_id: vyos-build
    zone: us-west1-a

  tasks:
    - name: Launch vyos build box
      gce:
          instance_names: vyos-build-box
          machine_type: "{{ machine_type }}"
          image: "{{ image }}"
          service_account_email: "{{ service_account_email }}"
          credentials_file: "{{ credentials_file }}"
          project_id: "{{ project_id }}"
          zone: "{{ zone }}"
          state: present
          tags: build-server
      register: gce

    - name: Create disk for building vyos
      gce_pd:
          name: vyos-build-disk
          mode: READ_WRITE
          service_account_email: "{{ service_account_email }}"
          credentials_file: "{{ credentials_file }}"
          project_id: "{{ project_id }}"
          state: present
          instance_name: "{{ gce.instance_data[0].name }}"
          zone: "{{ zone }}"
          delete_on_termination: yes

    - name: Download google linux guest packages
      shell: aptitude download "{{item}}"
      with_items: "{{ pkg_list }}"

    - name: Wait for SSH to come up
      wait_for: host={{ item.public_ip }} port=22 delay=10 timeout=60
      loop: "{{ gce.instance_data }}"

    - name: Add host to groupname
      add_host: hostname={{ item.public_ip }} groupname=new_instances
      loop: "{{ gce.instance_data }}"

    - name: Use gcloud cli to generate keypair 
      command: gcloud compute ssh vyos-build-box --quiet --zone "{{ zone }}" --command "whoami"

- name: Manage new host
  hosts: new_instances
  become: yes
  gather_facts: True

  vars:
      vyos_iso_url: "{{ iso }}"
      vyos_iso_local: /tmp/vyos.iso
      vyos_key_url: http://packages.vyos.net/vyos-release.gpg
      vyos_key_local: /tmp/vyos-release.gpg

      CD_ROOT: /mnt/cdrom
      CD_SQUASH_ROOT: /mnt/cdsquash
      SQUASHFS_IMAGE: "{{ CD_ROOT }}/live/filesystem.squashfs"

      ROOT_FSTYPE: ext4
      ROOT_PARTITION: "{{ volume_drive}}1"

      WRITE_ROOT: /mnt/wroot
      READ_ROOT: /mnt/squashfs
      INSTALL_ROOT: /mnt/inst_root


  tasks:
          - name: Install some pakages
            apt:
                    update_cache: yes
                    name: 
                      - parted
                      - e2fsprogs
                      - gnupg
                    state: present
          - name: Load aufs module
            shell: modprobe aufs

          - name: Download Vyos ISO release
            get_url:
                  url: "{{ vyos_iso_url }}"
                  dest: "{{ vyos_iso_local }}"

          - name: Mount ISO
            mount:
                    name: "{{ CD_ROOT }}"
                    src: "{{ vyos_iso_local }}"
                    fstype: iso9660
                    opts: loop,ro
                    state: mounted

          - name: Verify checksums of all the fiels in the ISO image
            command: md5sum -c md5sum.txt
            args:
              chdir: "{{ CD_ROOT }}"
            changed_when: False

          - name: Mount squashfs image from ISO
            mount:
              name: "{{ CD_SQUASH_ROOT }}"
              src: "{{ SQUASHFS_IMAGE }}"
              fstype: squashfs
              opts: loop,ro
              state: mounted

          - name: Read version string from iso packages
            shell: cat {{ CD_SQUASH_ROOT }}/opt/vyatta/etc/version | awk '{print $2}' | tr + -
            register: version_string

          - name: Debug version string as read from ISO
            debug: msg= "This is version {{ version_string.stdout }}"
      
          - name: Partition the target drive
 
            parted:
              device: "{{ volume_drive }}"
              state: present
              label: msdos
              number: 1
              part_type: primary
              part_start: 0%
              part_end: 100%
              align: optimal
              flags: [boot]

          - name: Create a filesystem on root partition
            filesystem:
              fstype: "{{ ROOT_FSTYPE }}"
              device: "{{ ROOT_PARTITION }}"
              opts: "-L persistence"

          - name: Mount root partition
            mount:
              name: "{{ WRITE_ROOT }}"
              src: "{{ ROOT_PARTITION }}"
              fstype: "{{ ROOT_FSTYPE }}"
              state: mounted
    
    # ---- Install image from ISO ----
          - name: Create {{ WRITE_ROOT }} directories
            file:
              path: "{{ WRITE_ROOT }}/boot/{{ version_string.stdout }}/rw"
              state: directory
            register: RW_DIR
      
          - name: Create the work directory
            file:
              path: "{{ WRITE_ROOT }}/boot/{{ version_string.stdout }}/work/work"
              state: directory
      
          - name: Copy squashfs image from ISO to root partition
            command: cp -p {{ SQUASHFS_IMAGE }} {{ WRITE_ROOT }}/boot/{{ version_string.stdout }}/{{ version_string.stdout }}.squashfs
            args:
             creates: "{{ WRITE_ROOT }}/boot/{{ version_string.stdout }}/{{ version_string.stdout }}.squashfs"
      
          - name: Copy boot files (kernel and initrd images) from ISO to root partition
            shell: find {{ CD_SQUASH_ROOT }}/boot -maxdepth 1  \( -type f -o -type l \) -print -exec cp -dp {} {{ WRITE_ROOT }}/boot/{{ version_string.stdout }}/ \;
            args:
              creates: "{{ WRITE_ROOT }}/boot/{{ version_string.stdout }}/vmlinuz"
      
          - name: Mount squashfs image from root partition
            mount:
              name: "{{ READ_ROOT }}"
              src: "{{ WRITE_ROOT }}/boot/{{ version_string.stdout }}/{{ version_string.stdout }}.squashfs"
              fstype: squashfs
              opts: loop,ro
              state: mounted
      
          - name: Set up union root for post installation tasks
            mount:
              name: "{{ INSTALL_ROOT }}"
              src: none
              fstype: aufs
              opts: "noatime,dirs={{ RW_DIR.path }}=rw:{{ READ_ROOT }}=rr"
              state: mounted
      
          # ---- Post image installation tasks ----
      
          ## ---- VyOS configuration ----
          - name: Make sure that config partition marker exists
            file:
              path: "{{ INSTALL_ROOT }}/opt/vyatta/etc/config/.vyatta_config"
              state: touch
      
          - name: Copy the default config for GCE to the installed image
            template:
              src: templates/config.boot.default.ec2
              dest: "{{ INSTALL_ROOT }}/opt/vyatta/etc/config/config.boot"
              mode: 0755

          - name: Copy the gcloud linux packages
            copy:
              src: "{{item}}"
              dest: "{{ INSTALL_ROOT }}/tmp/"
              mode: 0755
            with_fileglob: "*.deb"
            register: deb_name
     
          ## ---- Install GRUB boot loader ----
          - name: Create GRUB directory
            file:
              path: "{{ WRITE_ROOT }}/boot/grub"
              state: directory
      
          # It is necessary to mount and bind /dev, /proc, /sys and /boot in order to execute grub-install
          # and install GRUB correctly within the {{ volume_drive }} using chroot
      
          # XXX: ansible mount module requires fstype so it cannot be used for binding an already
          # mounted location, we get to use mount directly at least for /boot
          - name: Mount and bind /dev /proc /sys and {{ WRITE_ROOT }}/boot to {{ INSTALL_ROOT }}
            shell: mount --bind /dev {{ INSTALL_ROOT }}/dev &&
                   mount --bind /proc {{ INSTALL_ROOT }}/proc &&
                   mount --bind /sys {{ INSTALL_ROOT }}/sys &&
                   mount --bind {{ WRITE_ROOT }} {{ INSTALL_ROOT }}/boot
            args:
              warn: no
      
          - name: Install GRUB in the boot sector of {{ volume_drive }}
            command: chroot {{ INSTALL_ROOT }} grub-install --no-floppy --root-directory=/boot {{ volume_drive }}
            args:
              creates: "{{ INSTALL_ROOT }}/boot/grub/grubenv"

          - name: Install gcloud packages
            shell: chroot {{ INSTALL_ROOT }} dpkg -i "/tmp/*.deb"

          - name: Configure GRUB for GCE
            template:
              src: templates/boot/grub/grub.cfg.j2
              dest: "{{ WRITE_ROOT }}/boot/grub/grub.cfg"
              mode: 0644
      
          - name: Create the persistence config
            template:
              src: templates/persistence.conf
              dest: "{{ WRITE_ROOT }}/persistence.conf"
              mode: 0644
      
          # ---- Unmount all mounts ----
          - name: Unmount {{ INSTALL_ROOT }}/boot
            mount:
              name: "{{ INSTALL_ROOT }}/boot"
              src: "{{ WRITE_ROOT }}"
              fstype: none
              state: unmounted
      
          - name: Unmount {{ INSTALL_ROOT }}/sys, {{ INSTALL_ROOT }}/proc, {{ INSTALL_ROOT }}/dev
            mount:
              name: "{{ INSTALL_ROOT }}/{{ item }}"
              src: "/{{ item }}"
              fstype: none
              state: unmounted
            with_items: [ 'sys', 'proc', 'dev' ]
      
          - name: Unmount {{ INSTALL_ROOT }}
            mount:
              name: "{{ INSTALL_ROOT }}"
              src: overlayfs
              fstype: overlayfs
              state: unmounted
      
          - name: Unmount {{ READ_ROOT }}
            mount:
              name: "{{ READ_ROOT }}"
              src: "{{ WRITE_ROOT }}/boot/{{ version_string.stdout }}/{{ version_string.stdout }}.squashfs"
              fstype: squashfs
              state: unmounted
      
          - name: Unmount {{ WRITE_ROOT }}
            mount:
              name: "{{ WRITE_ROOT }}"
              src: "{{ ROOT_PARTITION }}"
              fstype: "{{ ROOT_FSTYPE }}"
              state: unmounted
      
          - name: Unmount {{ CD_SQUASH_ROOT }}
            mount:
              name: "{{ CD_SQUASH_ROOT }}"
              src: "{{ SQUASHFS_IMAGE }}"
              fstype: squashfs
              state: unmounted
      
          - name: Unmount {{ CD_ROOT }}
            mount:
              name: "{{ CD_ROOT }}"
              src: "{{ vyos_iso_local }}"
              fstype: iso9660
              state: unmounted
